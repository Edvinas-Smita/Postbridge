package com.devbridge.postbridge.parcelsapp.service;

import com.devbridge.postbridge.parcelsapp.mapper.ParcelsMapper;
import com.devbridge.postbridge.parcelsapp.model.Parcel;
import com.devbridge.postbridge.parcelsapp.model.ParcelStatusHistory;
import com.devbridge.postbridge.parcelsapp.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.validation.constraints.NotNull;
import java.util.List;

@Service
public class ParcelsService
{
    
    private ParcelsMapper parcelsMapper;
    
    @Autowired
    public ParcelsService(ParcelsMapper parcelsMapper)
    {
        this.parcelsMapper = parcelsMapper;
    }
    
    //<editor-fold desc="parcel CRUD" defaultstate="collapsed">
    public void createParcel(Parcel parcel)
    {
        parcelsMapper.createParcel(parcel);
        //recipient must be valid before getting here and parcelID is generated by this point
        parcelsMapper.pushHistory(parcel.getRecipient().getId(), (short) 1, parcel.getId());   //first record in the history of parcel statuses is "open" that is set by recipient on parcel creation
    }
    
    public Parcel getParcel(long id)
    {
        return parcelsMapper.getParcel(id);
    }
    
    public List<Parcel> getParcels()
    {
        return parcelsMapper.getParcels();
    }
    
    public boolean updateParcel(Parcel parcel)
    {
        if (parcel.getStatus() != null) //if status is given, try push it to history
        {
            Parcel oldParcel = getParcel(parcel.getId());
            if (parcel.getCourier() != null &&
                        parcel.getCourier().getId() != null &&
                        getUser(parcel.getCourier().getId()) != null && //referenced user must be valid (assuming that after creation status gets changed only by the courier)
                        oldParcel != null &&  //referenced parcel must be valid
                        !parcel.getStatus().equals(oldParcel.getStatus()))  //update only if status changed
            {
                parcelsMapper.pushHistory(parcel.getCourier().getId(), parcel.getStatus(), parcel.getId()); //TODO: can recipient also update history?
            } else
            {
                parcel.setStatus(null); //don't update status if not possible to write it to history
            }
        }
        return parcelsMapper.updateParcel(parcel) == 1; //PSQL returns lines updated so if 0 lines are updated then update was not successful
    }
    
    public boolean deleteParcel(long id)
    {
        return parcelsMapper.deleteParcel(id) == 1; //analogue to update
    }
    //</editor-fold>
    
    public User getUser(int id)
    {
        return parcelsMapper.getUser(id);
    }
    
    public List<ParcelStatusHistory> getParcelStatusHistory(long id)
    {
        return parcelsMapper.getParcelStatusHistory(id);
    }
}
