package com.devbridge.postbridge.parcelsapp.service;

import java.util.List;

import com.devbridge.postbridge.parcelsapp.mapper.ParcelsMapper;
import com.devbridge.postbridge.parcelsapp.model.Parcel;
import com.devbridge.postbridge.parcelsapp.model.ParcelStatusHistory;
import com.devbridge.postbridge.parcelsapp.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ParcelsService {

    private ParcelsMapper parcelsMapper;

    @Autowired
    public ParcelsService(ParcelsMapper parcelsMapper) {
        this.parcelsMapper = parcelsMapper;
    }

    //<editor-fold desc="parcel CRUD" defaultstate="collapsed">
    public void insertParcel(Parcel parcel) {
        parcelsMapper.insertParcel(parcel);
        //recipient must be valid before getting here and parcelID is generated by this point
        parcelsMapper.pushHistory(parcel.getRecipient().getId(), (short) 1, parcel.getId());   //first record in the history of parcel statuses is "open" that is set by recipient on parcel creation
    }

    public Parcel getParcel(long id) {
        return parcelsMapper.getParcel(id);
    }

    public List<Parcel> getParcels() {
        return parcelsMapper.getParcels();
    }

    public boolean replaceParcel(Parcel parcel) {
        Parcel oldParcel = getParcel(parcel.getId());
        if (oldParcel != null && !parcel.getStatus().equals(oldParcel.getStatus())) {
            Long userIdWhoChanged = null;

            if (parcel.getCourier() != null && parcel.getCourier().getId() != null) {
                userIdWhoChanged = parcel.getCourier().getId();
            }
            else if (oldParcel.getCourier() != null && oldParcel.getCourier().getId() != null) {
                userIdWhoChanged = oldParcel.getCourier().getId();
            }

            parcelsMapper.pushHistory(userIdWhoChanged != null
                                      ? userIdWhoChanged
                                      : parcel.getRecipient().getId(), parcel.getStatus(), parcel.getId());
        }
        return parcelsMapper.updateParcel(parcel) == 1; //PSQL returns lines updated so if 0 lines are updated then update was not successful
    }

    public boolean deleteParcel(long id) {
        return parcelsMapper.deleteParcel(id) == 1; //analogue to update
    }
    //</editor-fold>

    public User getUser(long id) {
        return parcelsMapper.getUser(id);
    }

    public List<ParcelStatusHistory> getParcelStatusHistory(long id) {
        return parcelsMapper.getParcelStatusHistory(id);
    }
}
